<MudDialog Style="width:500px; min-height:300px;">
    <DialogContent>
        <MudRadioGroup @bind-Value="_selectedEffectType">
            <MudRadio Value="@("Basic")" Color="Color.Default">Basic</MudRadio>
            <MudRadio Value="@("Aura")" Color="Color.Info">Aura</MudRadio>
            <MudRadio Value="@("Scaling")" Color="Color.Secondary">Scaling</MudRadio>
        </MudRadioGroup>

        <MudDivider Class="my-4" />
        <MudSelect T="BuffEffect" Label="Buff Effect Type" Variant="Variant.Outlined" @bind-Value="_viewModel.Type" For="@(() => _viewModel.Type)" />
        <MudNumericField T="float" Label="Magnitude" Variant="Variant.Outlined" @bind-Value="_viewModel.Magnitude" For="@(() => _viewModel.Magnitude)" />
        @if (_selectedEffectType == "Aura")
        {
            <MudDivider/>
               <MudText Typo="Typo.h6">Aura Properties</MudText>
                <MudSelect T="BasicPatternType" Label="Aura Scope" Variant="Variant.Outlined" @bind-Value="_viewModel.AuraScope" For="@(() => _viewModel.AuraScope)" />
                <MudNumericField T="int" Label="Aura Buff Code" Variant="Variant.Outlined" @bind-Value="_viewModel.AuraBuffCode" For="@(() => _viewModel.AuraBuffCode)" />
                <MudSelect T="TeamType" Label="Aura Targets" Variant="Variant.Outlined" MultiSelection="true" @bind-SelectedValues="_viewModel.AuraTargets" />
                <MudSwitch T="bool" Label="Use Move Pattern" Color="Color.Primary" @bind-Checked="_viewModel.UseMovePattern" />
                <MudSwitch T="bool" Label="Use Attack Pattern" Color="Color.Primary" @bind-Checked="_viewModel.UseAttackPattern" />
        }
        else if (_selectedEffectType == "Scaling")
        {
            <MudDivider/>
            <MudText Typo="Typo.h6">Scaling Properties</MudText>
            <MudNumericField T="float" Label="Scale Factor" Variant="Variant.Outlined" @bind-Value="_viewModel.ScaleFactor" For="@(() => _viewModel.ScaleFactor)" />
            <MudSelect T="StatType" Label="Target Stat" Variant="Variant.Outlined" @bind-Value="_viewModel.TargetStat" For="@(() => _viewModel.TargetStat)" />
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">취소</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">확인</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; }

    private class EffectViewModel
    {
        public BuffEffect Type { get; set; }
        public float Magnitude { get; set; }
        public BasicPatternType AuraScope { get; set; }
        public int AuraBuffCode { get; set; }
        public IEnumerable<TeamType> AuraTargets { get; set; } = new List<TeamType>();
        public bool UseMovePattern { get; set; }
        public bool UseAttackPattern { get; set; }
        public float ScaleFactor { get; set; }
        public StatType TargetStat { get; set; }
    }

    private EffectViewModel _viewModel = new();
    private string _selectedEffectType = "Basic";

    private void ManuallySetEffectType(string newType)
    {
        _selectedEffectType = newType;
        StateHasChanged();
    }
    
    private void Submit()
    {
        BuffDto resultDto = _selectedEffectType switch
        {
            "Aura" => new AuraDto
            {
                Type = _viewModel.Type,
                Magnitude = _viewModel.Magnitude,
                AuraScope = _viewModel.AuraScope,
                AuraBuffCode = _viewModel.AuraBuffCode,
                AuraTargets = new List<TeamType>(_viewModel.AuraTargets),
                UseMovePattern = _viewModel.UseMovePattern,
                UseAttackPattern = _viewModel.UseAttackPattern
            },
            "Scaling" => new ScalingBuffDto
            {
                Type = _viewModel.Type,
                Magnitude = _viewModel.Magnitude,
                ScaleFactor = _viewModel.ScaleFactor,
                TargetStat = _viewModel.TargetStat
            },
            _ => new BuffDto
            {
                Type = _viewModel.Type,
                Magnitude = _viewModel.Magnitude
            }
        };
        
        MudDialog.Close(DialogResult.Ok(resultDto));
    }

    void Cancel() => MudDialog.Cancel();
}