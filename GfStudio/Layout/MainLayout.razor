@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject ILogger<MainLayout> Logger

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider/>

<MudLayout>
    @* --- 왼쪽 사이드바 (모든 페이지 공통) --- *@
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Variant="DrawerVariant.Persistent">
        <MudNavMenu Class="mt-2">
            <MudText Typo="Typo.h6" Class="px-4 py-2">Database</MudText>
            <MudNavLink Href="/">Actors</MudNavLink>
            <MudNavLink Href="/behaviors">Behaviors</MudNavLink>
            <MudNavLink Href="/skills">Skills</MudNavLink>
            <MudNavLink Href="/items">Items</MudNavLink>
            <MudNavLink Href="/weapons">Weapons</MudNavLink>
            <MudNavLink Href="/buffsets">Buffsets</MudNavLink>
            <MudNavLink Href="/traits">Traits</MudNavLink>
            <MudButton OnClick="SaveProjectAsync">Save Project</MudButton>
        </MudNavMenu>
    </MudDrawer>

    @* --- 메인 콘텐츠 영역 (페이지마다 바뀔 알맹이) --- *@
    <MudMainContent Class="pa-2">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true; // 사이드바는 항상 열려있도록 설정
    private async Task SaveProjectAsync()
    {
        try
        {
            // 1. 현재 앱의 모든 데이터를 GameDataDto 객체에 담습니다.
            //    (실제로는 각 에디터의 데이터를 취합해야 합니다)
            //    _gameData.Actors = ...
            //    _gameData.BuffSets = ...

            // 2. JsonSerializer를 사용해 객체를 JSON 문자열로 변환합니다.
            var json = JsonSerializer.Serialize(GameDataDto.Database, new JsonSerializerOptions { WriteIndented = true });

            // 3. IJSRuntime을 통해 JavaScript 함수를 호출합니다.
            await JSRuntime.InvokeVoidAsync("saveAsFile", "gamedata.json", json);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save project.");
        }
    }
}