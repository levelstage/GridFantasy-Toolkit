@page "/buffset-editor"
@inject IJSRuntime JS
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using GfStudio.Services
@using GfToolkit.Shared.Models.Buffs
@using GfToolkit.Shared
@inject EditorDataService DataService

<div style="display:flex; gap:20px;">

    <!-- Left: BuffSet 편집 -->
    <div style="flex:2; border:1px solid gray; padding:10px;">
        <h2>BuffSet Editor</h2>
        <div>
            <label>Code:</label> <input @bind="DataService.CurrentBuffSet.Code" />
        </div>
        <div>
            <label>Name:</label> <input @bind="DataService.CurrentBuffSet.Name" />
        </div>
        <div>
            <label>Description:</label> <input @bind="DataService.CurrentBuffSet.Description" />
        </div>
        <div>
            <label>Duration:</label> <input type="number" @bind="DataService.CurrentBuffSet.Duration" />
        </div>

        <div>
            <label>IsBuff:</label> <input type="checkbox" @bind="DataService.CurrentBuffSet.IsBuff" />
            <label>IsDebuff:</label> <input type="checkbox" @bind="DataService.CurrentBuffSet.IsDebuff" />
            <label>Removable:</label> <input type="checkbox" @bind="DataService.CurrentBuffSet.Removable" />
            <label>Visible:</label> <input type="checkbox" @bind="DataService.CurrentBuffSet.Visible" />
        </div>

        <hr />
        <h3>Effects</h3>

        <div>
            <label>Add Buff Type:</label>
            <select @bind="newBuffType">
                <option value="Buff">Buff</option>
                <option value="Aura">Aura</option>
                <option value="ScalingBuff">ScalingBuff</option>
            </select>
            <button @onclick="AddNewEffect">Add Buff</button>
        </div>

        @foreach (var effect in DataService.CurrentBuffSet.Effects.Select((b, i) => new { b, i }))
        {
            <div style="border:1px solid gray; padding:5px; margin:5px;">
                <b>Effect @effect.i - @effect.b.GetType().Name</b>
                <button @onclick="() => RemoveEffect(effect.i)">Remove</button>

                <div>
                    <label>Type:</label>
                    <select @bind="effect.b.Type">
                        @foreach (BuffType t in Enum.GetValues(typeof(BuffType)))
                        {
                            <option value="@t">@t</option>
                        }
                    </select>

                    <label>Magnitude:</label> <input type="number" @bind="effect.b.Magnitude" />
                </div>

                @if (effect.b is Aura aura)
                {
                    <div>
                        <label>AuraEffect:</label> <input @bind="aura.AuraEffect" />
                        <label>AuraScope: </label> <select @bind="aura.AuraScope">
                            @foreach (BasicPatternType scope in Enum.GetValues(typeof(BasicPatternType)))
                            {
                                <option value="@scope">@scope</option>
                            }
                        </select>
                        <label>UseMovePattern:</label> <input type="checkbox" @bind="aura.UseMovePattern" />
                        <label>UseAttackPattern:</label> <input type="checkbox" @bind="aura.UseAttackPattern" />
                    </div>
                }

                @if (effect.b is ScalingBuff scaling)
                {
                    <div>
                        <label>ScaleFactor:</label> <input type="number" step="0.01" @bind="scaling.ScaleFactor" />
                        <label>TargetStat:</label> <input @bind="scaling.TargetStat" />
                    </div>
                }
            </div>
        }

        <button @onclick="SaveBuffSet">Save BuffSet JSON</button>
    </div>

    <!-- Right: 전체 BuffSet 목록 -->
    <div style="flex:1; border:1px solid gray; padding:10px;">
        <h3>All BuffSets</h3>
        <button @onclick="NewBuffSet">New BuffSet</button>
        <ul>
            @foreach (var set in DataService.BuffSets.Select((s, i) => new { s, i }))
            {
                <li style="margin-bottom:5px;">
                    <b>@set.s.Name (@set.s.Code)</b>
                    <button @onclick="() => LoadBuffSet(set.i)">Edit</button>
                    <button @onclick="() => DeleteBuffSet(set.i)">Delete</button>
                </li>
            }
        </ul>
    </div>

</div>

@code {
    private string newBuffType = "Buff";

    private void AddNewEffect()
    {
        Buff newBuff = newBuffType switch
        {
            "Aura" => new Aura(),
            "ScalingBuff" => new ScalingBuff(),
            _ => new Buff()
        };
        DataService.CurrentBuffSet.Effects.Add(newBuff);
    }

    private void RemoveEffect(int index)
    {
        if (index >= 0 && index < DataService.CurrentBuffSet.Effects.Count)
            DataService.CurrentBuffSet.Effects.RemoveAt(index);
    }

    private void SaveBuffSet()
    {
        var existing = DataService.BuffSets.FirstOrDefault(b => b.Code == DataService.CurrentBuffSet.Code);
        if (existing != null)
        {
            // 덮어쓰기
            int idx = DataService.BuffSets.IndexOf(existing);
            DataService.BuffSets[idx] = new BuffSet(DataService.CurrentBuffSet);
        }
        else
        {
            // 신규 추가
            DataService.BuffSets.Add(new BuffSet(DataService.CurrentBuffSet));
        }
    }

    private void LoadBuffSet(int index)
    {
        DataService.CurrentBuffSet = new BuffSet(DataService.BuffSets[index]);
    }

    private void DeleteBuffSet(int index)
    {
        DataService.BuffSets.RemoveAt(index);
        DataService.CurrentBuffSet = new BuffSet { Effects = new List<Buff>() };
    }

    private void NewBuffSet()
    {
        DataService.CurrentBuffSet = new BuffSet { Effects = new List<Buff>() };
    }
}
